import urllib2
""" by importing minidom, Node FROM xml.dom it means not having to refer to the full name with the package prefix xml.dom.minidom each time I use it """
from xml.dom import minidom, Node

class RSSItem:
	"""This is an RSS item, it contains all the RSS information for a single entry such as Title and Description"""
	def __init__(self, title="", description="", link="", author="", guid="", date_published=""):
		self.title = title.encode("utf-8")
		self.description = description.encode("utf-8")
		self.link = link.encode("utf-8")
		self.author = author.encode("utf-8")
		self.guid = guid.encode("utf-8")
		self.date_published = date_published.encode("utf-8")

class RSSReader:
	"""This is an RSS reader which takes an RSS file and parses it I guess"""
	def __init__(self,RSSUrl):
		"""Initialization"""
		self.RSSUrl = RSSUrl
		self.xmldoc = self.GetXMLDocument(RSSUrl)
		self.title = self.GetItemText(self.xmldoc.getElementsByTagName("title")[0])
		if (not self.xmldoc):
			print "Error Getting XML Document!"

	def GetXMLDocument(self,RSSUrl):
		"""This function reads in an RSS Url and then returns the XML document on success"""
		url_info = urllib2.urlopen(RSSUrl)
		xmldoc = None
		if (url_info):
			xmldoc = minidom.parse(url_info)
		else:
			print "Error Getting RSS URL"
		return xmldoc

	def CreateRSSItem(self,item_node):
		""" create an rss item and return it """
		title = self.GetChildText(item_node,"title")
		description = self.GetChildText(item_node,"description")
		link = self.GetChildText(item_node,"link")
		guid = self.GetChildText(item_node,"guid")
		date_published = self.GetChildText(item_node,"pubDate")
		if date_published == "" or date_published == None:
			date_published = self.GetChildText(item_node, "dc:date")
		author = self.GetChildText(item_node, "author")
		if author == "" or author == None:
			author = self.GetChildText(item_node, "dc:creator")
		return RSSItem(title,description,link,author,guid,date_published)

	def GetItemText(self,xml_node):
		""" Get the text from an xml item """
		text = ""
		for text_node in xml_node.childNodes:
			# Only text nodes and cdata nodes are parsed
			# CDATA nodes are sometimes used for titles - so...
			# Kinda important.
			if(text_node.nodeType == Node.TEXT_NODE or Node.CDATA_SECTION_NODE):
				text += text_node.nodeValue
		return text
	
	def GetChildText(self,xml_node,child_name):
		""" Get a child node from the xml node """
		if (not xml_node):
			print "Error GetChildNode: No xml_node"
			return ""
		for item_node in xml_node.childNodes:
			if (item_node.nodeName == child_name):
				return self.GetItemText(item_node)
		""" return nothing """
		return ""

	""" Now a generator """
	""" Generators are special iterators, and each iteration we can use the returned value generated by yield """
	def GetItems(self):
		for item_node in self.xmldoc.documentElement.childNodes:
			if(item_node.nodeName == "item"):
				# depending on the RSS feed, "item" may be on the first level
				rss_item = self.CreateRSSItem(item_node)
				yield rss_item
			elif(item_node.nodeName == "channel"):
				# but "item" may be within "channel"
				for inner_item_node in item_node.childNodes:
					if(inner_item_node.nodeName == "item"):
						rss_item = self.CreateRSSItem(inner_item_node)
						yield rss_item
	
"""
if __name__ == "__main__":
	# rss_reader = RSSReader('http://rss.slashdot.org/Slashdot/slashdot')
	# rss_reader = RSSReader('http://feeds.guardian.co.uk/theguardian/uk/rss')
	rss_reader = RSSReader('http://www.dailymail.co.uk/home/index.rss')
	for rss_item in rss_reader.GetItems():
		if (rss_item):
			print rss_item.title.encode("utf-8")
			print rss_item.link
			print ""
"""